{
    "Bloc event": {
      "prefix": "blocevent",
      "body": [
        "class ${TM_FILENAME_BASE/(.*)_events$/${1:/pascalcase}/g}${1:Noun}${2:Verb} extends ${TM_FILENAME_BASE/(.*)_events$/${1:/pascalcase}/g}Event {",
        "\tconst ${TM_FILENAME_BASE/(.*)_events$/${1:/pascalcase}/g}$1$2();",
        "\t",
        "\t@override",
        "\tList<Object> get props => [];",
        "}"
      ],
      "description": "Bloc Subject + Noun (optional) + Verb (event)"
    },  
    "Bloc event Handler": {
      "prefix": "onblocevent",
      "body": [
        "on<${TM_FILENAME_BASE/(.*)_bloc$/${1:/pascalcase}/g}${1:Event}>((event, emit) {",
        "\t${2:// TODO: implement Bloc Event Handler}",
        "});"
      ],
      "description": "Register a new Bloc Event Handler"
    },
    "Emit bloc state": {
      "prefix": "emitblocstate",
      "body": [
        "emit(state.copyWith($1));"
      ],
      "description": "Emits new bloc state"
    },
    "Read bloc from context": {
      "prefix": "readbloc",
      "body": [
        "context.read<${1:BlocClass}>()"
      ],
      "description": "Reads bloc from context"
    },
    "Read bloc from context and add an event": {
      "prefix": "readblocadd",
      "body": [
        "context.read<${1:BlocClass}>().add(${2:BlocEventClass})"
      ],
      "description": "Reads bloc from context and adds bloc event"
    }
  }